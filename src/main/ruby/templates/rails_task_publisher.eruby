package hudson.plugins.rubyMetrics.<%= @package_name %>;

import hudson.Extension;
import hudson.model.AbstractBuild;
import hudson.model.AbstractProject;
import hudson.model.Action;
import hudson.plugins.rake.Rake;
import hudson.plugins.rake.RubyInstallation;
import hudson.plugins.rubyMetrics.AbstractRailsTaskPublisher;
import hudson.plugins.rubyMetrics.<%= @package_name %>.model.<%= @camelized_name %>BuildResults;
import hudson.tasks.BuildStepDescriptor;
import hudson.tasks.Publisher;

import org.codehaus.plexus.util.StringOutputStream;
import org.kohsuke.stapler.DataBoundConstructor;

@SuppressWarnings("unchecked")
public class <%= @camelized_name %>Publisher extends AbstractRailsTaskPublisher {
	
    @DataBoundConstructor
    public <%= @camelized_name %>Publisher(String rakeInstallation, String rakeWorkingDir) {
        super(rakeInstallation, rakeWorkingDir, <%= @rake_task %>);
    }

    protected void buildAction(StringOutputStream out, AbstractBuild<?, ?> build) {
        final <%= @camelized_name %>Parser parser = new <%= @camelized_name %>Parser();
        <%= @camelized_name %>BuildResults results = parser.parse(out);

        RailsStatsBuildAction action = new RailsStatsBuildAction(build, results);
        build.getActions().add(action);
    }

    @Override
    public Action getProjectAction(AbstractProject<?,?> project) {
        return new <%= @camelized_name %>ProjectAction(project);
    }

    @Extension
    public static final DescriptorImpl DESCRIPTOR = new DescriptorImpl();

    public static final class DescriptorImpl extends BuildStepDescriptor<Publisher> {

        protected DescriptorImpl() {
            super(<%= @camelized_name %>Publisher.class);
        }

        @Override
        public String getDisplayName() {
            return "Publish <%= @real_name %> report";
        }

        public RubyInstallation[] getRakeInstallations() {
            return Rake.DESCRIPTOR.getInstallations();
        }

        @Override
        public boolean isApplicable(Class<? extends AbstractProject> jobType) {
            return true;
        }

    }

    @Override
    public BuildStepDescriptor<Publisher> getDescriptor() {
        return DESCRIPTOR;
    }

}
